; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_g1
_DATA	SEGMENT
COMM	_g2:DWORD
_DATA	ENDS
_DATA	SEGMENT
_g1	DD	03H
_DATA	ENDS
PUBLIC	_f
PUBLIC	_main
_BSS	SEGMENT
_c1	DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_s1	DW	02H
$SG9157	DB	'in main(): g1 =  %d', 09H, 'g2 = %d', 09H, 'c1 = %d', 09H
	DB	's1 = %d', 0aH, 00H
$SG9172	DB	'in f(): s1 = %d', 09H, 's2 = %d', 09H, 'c1 = %d', 09H, 'i'
	DB	'1 = %d', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\K-State\cis450\runs\2020S\Old\Exam1\Question1\Asm1_4.c
_TEXT	SEGMENT
_main	PROC
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 04		 push	 4
  00005	6a 03		 push	 3
  00007	6a 01		 push	 1
  00009	e8 00 00 00 00	 call	 _f
  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00011	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _s1
  00018	50		 push	 eax
  00019	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _c1
  00020	51		 push	 ecx
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g2
  00027	52		 push	 edx
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR _g1
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET $SG9157
  00033	e8 00 00 00 00	 call	 _printf
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	33 c0		 xor	 eax, eax
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\K-State\cis450\runs\2020S\Old\Exam1\Question1\Asm1_4.c
_TEXT	SEGMENT
_i1$ = -8						; size = 4
_s2$ = -4						; size = 2
_p1$ = 8						; size = 4
_p2$ = 12						; size = 2
_p3$ = 16						; size = 1
_f	PROC
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR _g1
  0000b	89 45 f8	 mov	 DWORD PTR _i1$[ebp], eax
  0000e	0f b6 4d 10	 movzx	 ecx, BYTE PTR _p3$[ebp]
  00012	83 c1 01	 add	 ecx, 1
  00015	66 89 4d fc	 mov	 WORD PTR _s2$[ebp], cx
  00019	83 7d 08 00	 cmp	 DWORD PTR _p1$[ebp], 0
  0001d	7f 42		 jg	 SHORT $LN4@f
  0001f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g1
  00025	83 c2 01	 add	 edx, 1
  00028	89 15 00 00 00
	00		 mov	 DWORD PTR _g1, edx
$LN2@f:
  0002e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _s1
  00035	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g1
  0003b	7d 22		 jge	 SHORT $LN3@f
  0003d	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _s1
  00044	83 c1 08	 add	 ecx, 8
  00047	66 89 0d 00 00
	00 00		 mov	 WORD PTR _s1, cx
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g2
  00054	83 c2 01	 add	 edx, 1
  00057	89 15 00 00 00
	00		 mov	 DWORD PTR _g2, edx
  0005d	eb cf		 jmp	 SHORT $LN2@f
$LN3@f:
  0005f	eb 4a		 jmp	 SHORT $LN5@f
$LN4@f:
  00061	0f b7 45 fc	 movzx	 eax, WORD PTR _s2$[ebp]
  00065	03 05 00 00 00
	00		 add	 eax, DWORD PTR _g1
  0006b	a3 00 00 00 00	 mov	 DWORD PTR _g1, eax
  00070	83 7d 08 00	 cmp	 DWORD PTR _p1$[ebp], 0
  00074	7e 1c		 jle	 SHORT $LN6@f
  00076	0f b6 4d 10	 movzx	 ecx, BYTE PTR _p3$[ebp]
  0007a	51		 push	 ecx
  0007b	0f bf 55 0c	 movsx	 edx, WORD PTR _p2$[ebp]
  0007f	83 ea 01	 sub	 edx, 1
  00082	52		 push	 edx
  00083	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00086	83 e8 01	 sub	 eax, 1
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _f
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@f:
  00092	0f be 0d 00 00
	00 00		 movsx	 ecx, BYTE PTR _c1
  00099	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _g1
  0009f	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _g2
  000a5	88 0d 00 00 00
	00		 mov	 BYTE PTR _c1, cl
$LN5@f:
  000ab	8b 55 f8	 mov	 edx, DWORD PTR _i1$[ebp]
  000ae	52		 push	 edx
  000af	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _c1
  000b6	50		 push	 eax
  000b7	0f b7 4d fc	 movzx	 ecx, WORD PTR _s2$[ebp]
  000bb	51		 push	 ecx
  000bc	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _s1
  000c3	52		 push	 edx
  000c4	68 00 00 00 00	 push	 OFFSET $SG9172
  000c9	e8 00 00 00 00	 call	 _printf
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
_f	ENDP
_TEXT	ENDS
END
